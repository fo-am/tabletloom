;; -*- mode: scheme; -*-
;; penelope tablet loom (c) 2017 foam kernow

(define root (build-locator))

(define thread-kernel
  (with-state
   (translate (vector 1000 0 0))
   (list 
    (load-primitive "models/a.obj")
    (load-primitive "models/b.obj")
    (load-primitive "models/c.obj")
    (load-primitive "models/d.obj")
    (load-primitive "models/a-c.obj")
    (load-primitive "models/b-c.obj")
    (load-primitive "models/c-c.obj")
    (load-primitive "models/d-c.obj")
    (load-primitive "models/a-thick.obj")
    (load-primitive "models/b-thick.obj")
    (load-primitive "models/c-thick.obj")
    (load-primitive "models/d-thick.obj")
    (load-primitive "models/a-c-thick.obj")
    (load-primitive "models/b-c-thick.obj")
    (load-primitive "models/c-c-thick.obj")
    (load-primitive "models/d-c-thick.obj"))))

(define weft (with-state (translate (vector 1000 0 0)) (load-primitive "models/weft-thick.obj")))

(define (flip-normals) (pdata-map! (lambda (n) (vneg n)) "n"))
(begin
(with-primitive (list-ref thread-kernel 4) (flip-normals))
(with-primitive (list-ref thread-kernel 5) (flip-normals))
(with-primitive (list-ref thread-kernel 6) (flip-normals))
(with-primitive (list-ref thread-kernel (+ 8 4)) (flip-normals))
(with-primitive (list-ref thread-kernel (+ 8 5)) (flip-normals))
(with-primitive (list-ref thread-kernel (+ 8 6)) (flip-normals))
)

(define (list-wrap-ref l n)
  (list-ref l (modulo n (length l))))

(define (rotate-thread-tablet dir l)
  (if (eq? dir 'cw)
      (list
       (list-ref l 1) (list-ref l 2) 
       (list-ref l 3) (list-ref l 0))
      (list
       (list-ref l 3) (list-ref l 0) 
       (list-ref l 1) (list-ref l 2))))

(define (flip-direction dir)
  (if (eq? dir 'cw) 'ccw 'cw))

(define (flip-threads l)
  (list
   (list-ref l 1) (list-ref l 0) 
   (list-ref l 3) (list-ref l 2)))

(define (rotate-threads l dir orientation)
  (index-map 
   (lambda (i t) 
     (let ((flip (list-wrap-ref orientation i)))
       (rotate-thread-tablet (if (eq? flip 'left) dir (flip-direction dir)) t))) 
   l))

(define (build-thread n thread)
  (with-state 
   (parent root)
   (when (or (eq? thread 'a) (eq? thread 'A)) (colour (vector 1 0 0)))
   (when (or (eq? thread 'b) (eq? thread 'B)) (colour (vector 0 1 0)))
   (when (or (eq? thread 'c) (eq? thread 'C)) (colour (vector 0 0 1)))
   (when (or (eq? thread 'd) (eq? thread 'D)) (colour (vector 1 1 0)))
   (let ((thickened (if (or (eq? thread 'A) (eq? thread 'B) (eq? thread 'C) (eq? thread 'D)) 8 0)))     
     (build-instance (list-ref thread-kernel (+ n thickened))))))

(define (weave-unit direction threads orientation)
  (let ((dir (if (eq? (if (eq? orientation 'left) direction (flip-direction direction)) 'cw) 0 4)))
    (with-state
     (parent root)
     (colour (vector 1 0.6 0.3))
     (build-instance weft))
    (list
     (build-thread (+ dir 0) (list-ref threads 0))
     (build-thread (+ dir 1) (list-ref threads 1))
     (build-thread (+ dir 2) (list-ref threads 2))
     (build-thread (+ dir 3) (list-ref threads 3)))))

(define (weave-tablet direction threads orientation n)
  (cond
   ((null? threads) ())
   (else
    (with-state
     (translate (vector 0 0 (* (length threads) 1.8)))
     (weave-unit direction (car threads) (list-wrap-ref orientation n)))
    (weave-tablet direction (cdr threads) orientation (+ n 1)))))

(define (weave-wefts instructions threads orientation)
  (cond
   ((null? instructions) ())
   (else
    (let ((new-threads (rotate-threads threads (car instructions) orientation)))
      (translate (vector -2 0 0))
      (weave-tablet (car instructions) new-threads orientation 0)
      (weave-wefts (cdr instructions) new-threads orientation)))))

(define (weave instructions threads orientation)
  (weave-wefts instructions 
	       (dbg (index-map (lambda (i threads) 
		       (if (eq? (list-wrap-ref orientation i) 'left) threads (flip-threads threads)))
			  threads))
	       orientation))

(define (render)
  (with-primitive root 
		  (identity)
		  (scale (vector 0.65 0.65 0.65))
		  (rotate (vector 35 (* (time) 2) 0))
		  (translate (vector 15 0 -10))))

(every-frame (render))
