;; -*- mode: scheme; -*-
;; Planet Fluxus Copyright (C) 2013 Dave Griffiths
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (make-pdata types size-verts interleaved-data)
  (list types size interleaved-data 0))

(define (pdata-types v) (list-ref v 0))
(define (pdata-size-verts v) (list-ref v 1))
(define (pdata-interleaved-data v) (list-ref v 2))
(define (pdata-vbo v) (list-ref v 3))

(define (pdata-build-vbo gl v)
  (msg "building vbo")
  (msg (pdata-size-verts v))
  (msg (length (pdata-interleaved-data v)))
  (let ((vb (gl.createBuffer)))
    (gl.bindBuffer gl.ARRAY_BUFFER vb)
    (gl.bufferData gl.ARRAY_BUFFER (new Float32Array (length (pdata-interleaved-data v))) gl.STATIC_DRAW)
;    (set! vb.itemSize (* (length (pdata-types v)) 3))
;    (set! vb.numItems (* (length (pdata-types v)) 
;			 (length (pdata-interleaved-data v))))
    (list-replace v 3 vb)))

(define (pdata-update-vbo! gl v)
  (msg "updating vbo")
  (msg (length (pdata-interleaved-data v)))
  (msg (/ (/ (length (pdata-interleaved-data v)) 2) 3))
  (msg (pdata-size-verts v))
  (gl.bindBuffer gl.ARRAY_BUFFER (pdata-vbo v))
  (gl.bufferData gl.ARRAY_BUFFER (new Float32Array (pdata-interleaved-data v)) gl.STATIC_DRAW))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (define (vbo-map p fn name)
;;   (polyprim-modify-buffer
;;    p name
;;    (lambda (b)
;;      (buffer-update! gl b (map fn (buffer-data p))))))

(define (pdata-render pdata gl view-camera state tx)
  (let ;; assumptions...
      ((model-view (mat4.create))
       (local (mat4.create))
       (normal (mat4.create))
       (shader (state-shader state))
       (texture (state-texture state))
       (colour (state-colour state))
       (hints (state-hints state)))
    (mat4.multiply tx (state-tx state) local)
    (mat4.multiply view-camera local model-view)

    (gl.useProgram shader)
    
    (gl.bindBuffer gl.ARRAY_BUFFER (pdata-vbo pdata))

    (gl.vertexAttribPointer 
     shader.vertexPositionAttribute 3 gl.FLOAT false 24 0)
    (gl.vertexAttribPointer 
     shader.vertexNormalAttribute 3 gl.FLOAT false 24 12)
    (gl.vertexAttribPointer 
     shader.vertexTextureAttribute 3 gl.FLOAT false 24 0)

    (if (eq? texture "")
	(bind-texture gl shader "white.png")
	(bind-texture gl shader texture))
    
    (gl.uniformMatrix4fv shader.ModelViewMatrixUniform false model-view)
    (mat4.toRotationMat local normal)
    (gl.uniformMatrix4fv shader.NormalMatrixUniform false normal)

    (gl.uniform3fv shader.DiffuseColour colour)

    (when (bitwise-and hints FLX_HINT_SOLID)
	  (gl.drawArrays gl.TRIANGLES 0 (pdata-size-verts pdata))) 
    (when (bitwise-and hints FLX_HINT_WIRE)
	  (gl.drawArrays gl.LINE_STRIP 0 (pdata-size-verts pdata)))
    ))
